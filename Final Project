#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 10 22:04:33 2020

@author: moonliang
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.decomposition import PCA
import random
# #1
# rawfile = pd.read_csv('middleSchoolData.csv', na_values=["?"])
# rawfile_data=rawfile.drop(columns=['dbn','school_name'])
# data=rawfile_data.to_numpy()
# data=data.astype(np.float)
# app=rawfile['applications']
# acc=rawfile['acceptances']
# plt.scatter(app,acc)
# plt.xlabel('app')
# plt.ylabel('acc')
# plt.show()
# corr_app_acc=np.corrcoef(app,acc)

# #2
# rawfile1=rawfile.drop([250,471])
# size=rawfile1['school_size']
# app1=rawfile1['applications']
# acc1=rawfile1['acceptances']
# apprate=(data[:,2])/(data[:,20])
# apprate=app1/size
# corr_apprate_acc=np.corrcoef(apprate,acc1)
# plt.scatter(apprate,acc1)
# plt.xlabel('apprate')
# plt.ylabel('acceptance')
# plt.show()
# best=apprate.max()

# #3
# size=rawfile['school_size']
# acc=rawfile['acceptances']
# num=rawfile['dbn']
# acc_rate=acc/size
# best=acc_rate.max()
# ind=0
# for i in acc_rate:
#     if i!=best:
#         ind+=1
#     else:
#         break
# print(ind)
# plt.scatter(num,acc_rate)
# plt.xlabel('schools')
# plt.ylabel('acceptancerate')
# plt.show()

# #4
# '''
# Q4:  PCA dimensional reduction
# '''

# student_school=data[:,[9,10,11,12,13,14,19,20,21]]
# student_school=student_school.astype(np.float)
# a=student_school[~np.isnan(student_school).any(axis=1)]
# con_student_school=a[:,[0,1,2,3,4,5]]
# con_achieve=a[:,[6,7,8]]


# # plt.imshow(con_student_school) 
# # plt.colorbar()
# # r=np.corrcoef(con_student_school,rowvar=False)
# # plt.imshow(r) 
# # plt.colorbar()

# zscored_data = stats.zscore(con_student_school)
# pca = PCA(n_components=1)
# pca.fit(con_student_school)
# school_climate=pca.transform(con_student_school)
# eig_vals = pca.explained_variance_
# loadings = pca.components_
# rotated_data = pca.fit_transform(zscored_data)
# pca = PCA(n_components=1)
# pca.fit(con_achieve)
# school_achieve=pca.transform(con_achieve)
# r_climate_achieve=np.corrcoef(school_achieve,school_climate,rowvar=False)
# plt.scatter(school_achieve,school_climate)
# plt.xlabel('school_achieve')
# plt.ylabel('school_climate')
# plt.show()

# covar_explained = eig_vals/sum(eig_vals)*100
# num_classes = 6
# plt.bar(np.linspace(1,num_classes,num_classes),eig_vals)
# #plt.plot(eig_vals)
# plt.xlabel('Principal component')
# plt.ylabel('Eigenvalue')
# plt.plot([0,num_classes],[1,1],color='red',linewidth=1) 


#5
# charter=data[485:595]
# non_charter=data[0:485]
# acceptances_column=3
# avg_charter = np.mean(charter[:,acceptances_column])
# med_charter = np.median(charter[:,acceptances_column])
# std_charter = np.std(charter[:,acceptances_column])
# avg_non_charter = np.mean(non_charter[:,acceptances_column])
# med_non_charter = np.median(non_charter[:,acceptances_column])
# std_non_charter = np.std(non_charter[:,acceptances_column])

# num_reps=10000
# p_list=[]
# t_list=[]
# for i in range(num_reps): # loop through each repeat
#     sample_charter=np.random.choice(charter[:,3],size=50,replace=False)
#     sample_non_charter=np.random.choice(non_charter[:,3],size=50,replace=False)
#     t,p=stats.ttest_rel(sample_charter,sample_non_charter)                     
#     p_list.append(p)
#     t_list.append(t)
# p_mean=np.mean(p_list)
# t_mean=np.mean(t_list)
    
# print('p='+str(p_mean),'t='+str(t_mean))
# plt.hist(t_list,bins=100)

#6
# class_size_acc=data[:,[1,3]]
# processed_class_size_acc=class_size_acc[~np.isnan(class_size_acc).any(axis=1)]
# plt.scatter(processed_class_size_acc[:,1],processed_class_size_acc[:,0])
# plt.xlabel('Avg_class_size')
# plt.ylabel('Acceptances')
# plt.title('Correlation_Acceptances_Avg_class_size')
# plt.show()
# r_class_size_acc = np.corrcoef(processed_class_size_acc[:,0],processed_class_size_acc[:,1])

# spending_acc=data[:,[1,2]]
# processed_spending_acc=spending_acc[~np.isnan(spending_acc).any(axis=1)]
# plt.scatter(processed_spending_acc[:,1],processed_spending_acc[:,0])
# plt.xlabel('Per Student Spending')
# plt.ylabel('Acceptances')
# plt.title('Correlation_Acceptances_Spending')
# plt.show()
# r_spending_acc = np.corrcoef(processed_spending_acc[:,0],processed_spending_acc[:,1])


# spending_achieve=data[:,[1,19]]
# processed_spending_achieve=spending_achieve[~np.isnan(spending_achieve).any(axis=1)]
# plt.scatter(processed_spending_achieve[:,1],processed_spending_achieve[:,0])
# plt.xlabel('Per Student Spending')
# plt.ylabel('Achievement')
# plt.title('Correlation_Achievement_Spending')
# plt.show()
# r_spending_achieve = np.corrcoef(processed_spending_achieve[:,0],processed_spending_achieve[:,1])

# class_size_achieve=data[:,[3,19]]
# processed_class_size_achieve=class_size_achieve[~np.isnan(class_size_achieve).any(axis=1)]
# plt.scatter(processed_class_size_achieve[:,0],processed_class_size_achieve[:,1])
# plt.xlabel('Avg Class Size')
# plt.ylabel('Achievement')
# plt.title('Correlation_Achievement_Class_size')
# plt.show()
# r_class_size_achieve = np.corrcoef(processed_class_size_achieve[:,0],processed_class_size_achieve[:,1])

# #7
# import matplotlib.pyplot as plt; plt.rcdefaults()
# import numpy as np
# import matplotlib.pyplot as plt

# schoolnames=rawfile['dbn']
# school_acc=dict(zip(schoolnames,acc))
# school_accsorted=sorted(school_acc.items(), key=lambda x: x[1], reverse=True)

# objects=[]
# values=[]
# for i in school_accsorted: 
#     objects.append(i[0])
#     values.append(i[1])
# y_pos = np.arange(len(objects))
# plt.bar(y_pos,values , align='center', alpha=0.5)
# # plt.xticks(y_pos, objects)
# plt.ylabel('acceptancerate')
# plt.title('schoolacceptance')
# plt.show()

# sum_acc=acc.sum()
# print('acceptance sum ='+ str(sum_acc))
# n=0
# i=0
# while n<=(0.9*sum_acc):
#     n+=values[i]
#     i+=1
# print('number of schools='+str(i))
# proportion=123/len(objects)
# print('proportion of school='+str(proportion))

# #8
# from sklearn import linear_model
# 'for non-charter schools'
# #data1 = np.transpose([data[:,0],data[:,1],data[:,2],data[:,3],data[:,4],data[:,5],data[:,6],data[:,7],data[:,8],data[:,9],data[:,10],data[:,11],data[:,12],data[:,13],data[:,14],data[:,15],data[:,16],data[:,17],data[:,18]]) 
# data1=data[~np.isnan(data).any(axis=1)]
# student_school1=data1[:,[9,10,11,12,13,14]]
# student_school1=student_school1.astype(np.float)
# pca = PCA(n_components=1)
# pca.fit(student_school1)
# school_climate1=pca.transform(student_school1)
# data1=np.append(data1,school_climate1,axis=1)
# X_noncharter=data1[:,[0,2,3,4,5,6,7,8,15,16,17,18,22]]
# Y_acceptance = data1[:,1] # acceptances
# regr_a_noncharter = linear_model.LinearRegression() # linearRegression function from linear_model
# regr_a_noncharter.fit(X_noncharter,Y_acceptance) # fit model
# print(regr_a_noncharter.score(X_noncharter,Y_acceptance)) # r^2
# print(regr_a_noncharter.coef_) # beta
# print(regr_a_noncharter.intercept_) # intercept

# avg_achieve=data1[:,[19,20,21]]
# avg_achieve=avg_achieve.astype(np.float)
# pca = PCA(n_components=1)
# pca.fit(avg_achieve)
# school_achieve1=pca.transform(avg_achieve)
# regr_a_noncharter_achieve = linear_model.LinearRegression() # linearRegression function from linear_model
# regr_a_noncharter_achieve.fit(X_noncharter,school_achieve1) # fit model
# print(regr_a_noncharter_achieve.score(X_noncharter,school_achieve1)) # r^2
# print(regr_a_noncharter_achieve.coef_) # beta
# print(regr_a_noncharter_achieve.intercept_) 

# 'for charter schools'
# data_charter=data[485:,:]
# data2=data_charter[:,[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]]
# data2=data2[~np.isnan(data2).any(axis=1)]
# student_school2=data2[:,[9,10,11,12,13,14]]
# student_school2=student_school2.astype(np.float)
# pca = PCA(n_components=1)
# pca.fit(student_school2)
# school_climate2=pca.transform(student_school2)
# data2=np.append(data2,school_climate2,axis=1)
# X_charter=data2[:,[0,2,3,4,5,6,7,8,15,16,20]]
# Y_acceptance = data2[:,1] # acceptances
# regr_a_charter = linear_model.LinearRegression() # linearRegression function from linear_model
# regr_a_charter.fit(X_charter,Y_acceptance) # fit model
# print(regr_a_charter.score(X_charter,Y_acceptance)) # r^2
# print(regr_a_charter.coef_) # beta
# print(regr_a_charter.intercept_) # intercept

# avg_achieve2=data2[:,[17,18,19]]
# avg_achieve2=avg_achieve2.astype(np.float)
# pca = PCA(n_components=1)
# pca.fit(avg_achieve2)
# school_achieve2=pca.transform(avg_achieve2)
# regr_a_charter_achieve = linear_model.LinearRegression() # linearRegression function from linear_model
# regr_a_charter_achieve.fit(X_charter,school_achieve2) # fit model
# print(regr_a_charter_achieve.score(X_charter,school_achieve2)) # r^2
# print(regr_a_charter_achieve.coef_) # beta
# print(regr_a_charter_achieve.intercept_) 



